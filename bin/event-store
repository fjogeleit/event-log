#! /usr/bin/env node
const { cosmiconfigSync } = require('cosmiconfig');
const { createInMemoryEventStore } = require('../dist/in-memory')
const { green, red } = require('kleur')
const { Command } = require('commander');
const util = require('util')

const explorer = cosmiconfigSync('event-store');
const { config, isEmpty } = explorer.search();

const program = new Command();

const getEventStore = () => {
  if (isEmpty || !config) {
    throw new Error('event-store.config.js as configuration source is required')
  }

  let eventStore = createInMemoryEventStore(config);

  if (config.driver === 'postgres') {
    const { createPostgresEventStore } = require('../dist/postgres')

    eventStore = createPostgresEventStore(config);
  }

  if (config.driver === 'mysql') {
    const { createMysqlEventStore } = require('../dist/mysql')

    eventStore = createMysqlEventStore(config);
  }

  if (config.driver === 'sqlite') {
    const { createSqliteEventStore } = require('../dist/sqlite')

    eventStore = createSqliteEventStore(config);
  }

  return eventStore.install();
}

program
  .version('0.1.0')
  .usage('--help')
  .description('CLI to manage Event Log streams')
  

program
  .command('event-stream:create <streamName>')
  .description('Creates an new EventStream')
  .action(async (streamName) => {
    try {
      const eventStore = await getEventStore(program.envFile);
      await eventStore.createStream(streamName);

      console.log(green(`EventStream "${streamName}" successfully created`))
    } catch (error) {
      console.log(red(`EventStore initialisation failed with ${error.toString()}`))
    } finally {
      process.exit(0)
    }
  })

program
  .command('event-stream:delete <streamName>')
  .description('Deletes an existing EventStream')
  .action(async (streamName) => {
    try {
      const eventStore = await getEventStore(program.envFile);
      await eventStore.deleteStream(streamName);

      console.log(green(`EventStream "${streamName}" successfully deleted`))
    } catch (error) {
      console.log(red(`EventStore initialisation failed with ${error.toString()}`))
    } finally {
      process.exit(0)
    }
  })

program
  .command('projection:run <name>')
  .option('-k, --keep-running', '', false)
  .option('-s, --show-state', 'Show the new state after run', false)
  .description('Running a projection')
  .action(async (name, { keepRunning, showState }) => {
    try {
      const eventStore = await getEventStore();

      let projector = null;

      try {
        projector = eventStore.getProjector(name);
      } catch {
        projector = eventStore.getReadModelProjector(name);
      }

      await projector.run(keepRunning)

      console.log(green(`Running the projection ${name} completed`))

      if (showState) {
        console.log(`
        
NEW STATE
====================================================================
${util.inspect(projector.getState(), false, null, true)}
====================================================================
        `);
      }
    } catch (error) {
      console.log(red(`Running the projection failed with ${error.toString()}`))
    } finally {
      process.exit(0)
    }
  })

program
  .command('projection:reset <name>')
  .description('Reset a projection')
  .action(async (name) => {
    try {
      const eventStore = await getEventStore();
      let projector = null;

      try {
        projector = eventStore.getProjector(name);
      } catch {
        projector = eventStore.getReadModelProjector(name);
      }

      await projector.reset()

      console.log(green(`Reset the projection ${name} completed`))

    } catch (error) {
      console.log(red(`Running the projection failed with ${error.toString()}`))
    } finally {
      process.exit(0)
    }
  })

program
  .command('projection:delete <name>')
  .description('Delete a projection')
  .option('-d, --delete-emitted-events', '', false)
  .action(async (name, { deleteEmittedEvents }) => {
    try {
      const eventStore = await getEventStore();
      let projector = null;

      try {
        projector = eventStore.getProjector(name);
        await projector.delete(deleteEmittedEvents);
      } catch {
        projector = eventStore.getReadModelProjector(name);
        await projector.delete(true);
      }

      console.log(green(`Delete the projection ${name} completed`))

    } catch (error) {
      console.log(red(`Running the projection failed with ${error.toString()}`))
    } finally {
      process.exit(0)
    }
  })

program.parse(process.argv);
